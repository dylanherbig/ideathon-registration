{"version":3,"sources":["images/ideathonheader.png","firebase.js","Registration.js","reportWebVitals.js","index.js","images/logo.png"],"names":["module","exports","__webpack_require__","p","app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","storage","getAnalytics","getStorage","database","getDatabase","Registration","theme","createTheme","palette","secondary","main","primary","warning","error","info","_useState","useState","_useState2","Object","slicedToArray","firstName","setFirstName","_useState3","_useState4","firstNameCheck","setFirstNameCheck","_useState5","_useState6","lastName","setLastName","_useState7","_useState8","lastNameCheck","setLastNameCheck","_useState9","_useState10","email","setEmail","_useState11","_useState12","emailCheck","setEmailCheck","_useState13","_useState14","skills","setSkills","_useState15","_useState16","skillsCheck","setSkillsCheck","_useState17","_useState18","major","setMajor","_useState19","_useState20","majorCheck","setMajorCheck","_useState21","_useState22","learn","setLearn","_useState23","_useState24","learnCheck","setLearnCheck","_useState25","_useState26","dietaryRestriction","setDietaryRestriction","_useState27","_useState28","otherDietaryRestriction","setOtherDietaryRestriction","_useState29","_useState30","otherDietaryRestrictionCheck","setOtherDietaryRestrictionCheck","_useState31","_useState32","selectYear","setSelectYear","_useState33","_useState34","otherSelectYear","setOtherSelectYear","_useState35","_useState36","otherSelectYearCheck","setOtherSelectYearCheck","_useState37","_useState38","selectSchool","setSelectedSchool","_useState39","_useState40","resumeName","setResumeName","_useState41","_useState42","uploadResume","setUploadResume","_useState43","_useState44","isResumePicked","setIsResumePicked","_useState45","_useState46","progress","setProgress","_useState47","_useState48","successRegistration","setSuccessRegistration","selectRestrictions","event","includes","target","value","current","filter","diet","concat","toConsumableArray","_handleSubmit","asyncToGenerator","_regeneratorRuntime","mark","_callee","dietRestriction","url","applicant","newPostKey","updates","_applicant","_newPostKey","_updates","wrap","_context","prev","next","push","getDownloadURL","snapshot","ref","sent","schoolYear","uvaSchool","resume","child","key","abrupt","update","then","catch","console","warn","stop","apply","this","arguments","react_default","a","createElement","Fragment","ThemeProvider","reactjs_popup_esm","open","modal","Box","sx","borderRadius","textAlign","padding","display","flexFlow","gap","Typography","Link","href","Button","backgroundColor","color","boxShadow","&:hover","transform","border","borderColor","type","Grid","container","spacing","direction","alignItems","justifyContent","style","minHeight","minWidth","width","marginLeft","marginRight","Card","src","Logo","TextField","fullWidth","required","id","name","label","variant","size","autoComplete","onChange","e","replace","helperText","fontSize","FormControl","InputLabel","Select","labelId","MenuItem","marginTop","component","hidden","accept","storageReference","storageRef","files","uploadResumeToDB","uploadBytesResumable","on","bytesTransferred","totalBytes","changeResumeHandle","LinearProgress","boxSizing","multiline","maxRows","Infinity","FormGroup","FormControlLabel","control","Checkbox","onClick","handleSubmit","trigger","position","reportWebVitals","onPerfEntry","Function","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_Registration","route"],"mappings":"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","file":"static/js/main.a8e483dc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ideathonheader.074c8428.png\";","// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAnalytics } from \"firebase/analytics\";\r\nimport { getDatabase } from \"firebase/database\";\r\nimport { getStorage } from \"firebase/storage\";\r\n\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAFHTfN6KuOwzDsLdWtmZeFAVpVcI-Npfw\",\r\n    authDomain: \"ideathon-registration-form.firebaseapp.com\",\r\n    databaseURL: \"https://ideathon-registration-form-default-rtdb.firebaseio.com\",\r\n    projectId: \"ideathon-registration-form\",\r\n    storageBucket: \"ideathon-registration-form.appspot.com\",\r\n    messagingSenderId: \"1094596378197\",\r\n    appId: \"1:1094596378197:web:81887879503a76e09c5edc\",\r\n    measurementId: \"G-JSB5Q51DBG\"\r\n};\r\n\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst analytics = getAnalytics(app);\r\nexport const storage = getStorage(app);\r\nexport const database = getDatabase(app);","import React, { useState } from 'react';\r\n\r\n// firebase \r\nimport { database, storage } from './firebase';\r\nimport { ref, push, child, update } from \"firebase/database\";\r\nimport { uploadBytesResumable, getDownloadURL } from 'firebase/storage';\r\nimport { ref as storageRef } from 'firebase/storage'; // avoid naming issues\r\n\r\n// react pop up\r\nimport { Popup } from 'reactjs-popup';\r\nimport 'reactjs-popup/dist/index.css';\r\n\r\n// import mui styling\r\nimport {\r\n    Box,\r\n    Card,\r\n    Typography,\r\n    InputLabel,\r\n    TextField,\r\n    Select,\r\n    MenuItem,\r\n    LinearProgress,\r\n    Button,\r\n    Checkbox,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    FormControl,\r\n    Grid,\r\n    Link\r\n} from '@mui/material';\r\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\r\n\r\n// import logo\r\nimport Logo from \"./images/logo.png\";\r\nimport IdeathonHeader from \"./images/ideathonheader.png\";\r\n\r\nconst Registration = () => {\r\n\r\n    // theme\r\n    const theme = createTheme({\r\n        palette: {\r\n            secondary: {\r\n                main: '#f82249'\r\n            },\r\n            primary: {\r\n                main: '#ff9daf'\r\n            },\r\n            warning: {\r\n                main: '#f82249'\r\n            },\r\n            error: {\r\n                main: '#f82249'\r\n            },\r\n            info: {\r\n                main: '#f82249'\r\n            }\r\n        }\r\n    });\r\n\r\n    // text-fields\r\n    const [firstName, setFirstName] = useState('');\r\n    const [firstNameCheck, setFirstNameCheck] = useState(false);\r\n    const [lastName, setLastName] = useState('');\r\n    const [lastNameCheck, setLastNameCheck] = useState(false);\r\n    const [email, setEmail] = useState('');\r\n    const [emailCheck, setEmailCheck] = useState(false);\r\n    const [skills, setSkills] = useState('');\r\n    const [skillsCheck, setSkillsCheck] = useState(false);\r\n    const [major, setMajor] = useState('');\r\n    const [majorCheck, setMajorCheck] = useState(false);\r\n    const [learn, setLearn] = useState('');\r\n    const [learnCheck, setLearnCheck] = useState(false);\r\n\r\n    // dietary restrictions\r\n    const [dietaryRestriction, setDietaryRestriction] = useState([]);\r\n    const [otherDietaryRestriction, setOtherDietaryRestriction] = useState('');\r\n    const [otherDietaryRestrictionCheck, setOtherDietaryRestrictionCheck] = useState(false);\r\n\r\n    // year\r\n    const [selectYear, setSelectYear] = useState(2023);\r\n    const [otherSelectYear, setOtherSelectYear] = useState('');\r\n    const [otherSelectYearCheck, setOtherSelectYearCheck] = useState('');\r\n\r\n    // school\r\n    const [selectSchool, setSelectedSchool] = useState('college');\r\n\r\n    // resume upload\r\n    const [resumeName, setResumeName] = useState();\r\n    const [uploadResume, setUploadResume] = useState();\r\n    const [isResumePicked, setIsResumePicked] = useState(false);\r\n    const [progress, setProgress] = useState(0);\r\n\r\n    // successful registration upload\r\n    const [successRegistration, setSuccessRegistration] = useState(false);\r\n\r\n    const changeResumeHandle = (event) => {\r\n        const storageReference = storageRef(storage, `/ideathon-resume/${selectYear}/${event.target.files[0].name}`);\r\n        const uploadResumeToDB = uploadBytesResumable(storageReference, event.target.files[0]);\r\n\r\n        uploadResumeToDB.on(\"state_changed\", (snapshot) => {\r\n            setProgress((snapshot.bytesTransferred / snapshot.totalBytes) * 100);\r\n            setUploadResume(uploadResumeToDB);\r\n        });\r\n\r\n        setResumeName(event.target.files[0].name);\r\n        setIsResumePicked(true);\r\n    };\r\n\r\n\r\n    // add multiple dietary restrictions\r\n    const selectRestrictions = (event) => {\r\n\r\n\r\n        if (dietaryRestriction.includes(event.target.value)) {\r\n            setDietaryRestriction(current => current.filter(diet => diet !== event.target.value))\r\n        }\r\n        else {\r\n            setDietaryRestriction(current => [...current, event.target.value]);\r\n        }\r\n\r\n    };\r\n\r\n    async function handleSubmit() {\r\n\r\n\r\n        // update dietary restrictions with other value\r\n        var dietRestriction = dietaryRestriction;\r\n        if (otherDietaryRestriction !== '') {\r\n            dietRestriction.push(otherDietaryRestriction);\r\n        }\r\n\r\n\r\n        // checks if resume has been uploaded yet or not\r\n        if (progress === 100 && isResumePicked) {\r\n\r\n\r\n            // download url\r\n            const url = await getDownloadURL(uploadResume.snapshot.ref);\r\n\r\n            let applicant = {\r\n                firstName: firstName,\r\n                lastName: lastName,\r\n                email: email,\r\n                schoolYear: selectYear === 0 ? otherSelectYear : selectYear,\r\n                uvaSchool: selectSchool,\r\n                resume: url,\r\n                skills: skills,\r\n                learn: learn,\r\n                major: major,\r\n                dietaryRestriction: dietRestriction,\r\n            };\r\n\r\n            const newPostKey = push(child(ref(database), 'posts')).key;\r\n            const updates = {};\r\n            updates['/' + newPostKey] = applicant;\r\n            return update(ref(database), updates).then(() => setSuccessRegistration(true)).catch((error) => { console.warn(error) });\r\n        } else { // for when no resume is selected\r\n\r\n\r\n            let applicant = {\r\n                firstName: firstName,\r\n                lastName: lastName,\r\n                email: email,\r\n                schoolYear: selectYear === 0 ? otherSelectYear : selectYear,\r\n                uvaSchool: selectSchool,\r\n                resume: \"none\",\r\n                skills: skills,\r\n                learn: learn,\r\n                major: major,\r\n                dietaryRestriction: dietRestriction,\r\n            };\r\n\r\n            const newPostKey = push(child(ref(database), 'posts')).key;\r\n            const updates = {};\r\n            updates['/' + newPostKey] = applicant;\r\n            return update(ref(database), updates).then(() => setSuccessRegistration(true)).catch((error) => { console.warn(error) });\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <ThemeProvider theme={theme}>\r\n\r\n                <Popup\r\n                    open={successRegistration}\r\n                    modal\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            borderRadius: \"5px\",\r\n                            textAlign: \"center\",\r\n                            padding: \"15px\",\r\n                            display: \"flex\",\r\n                            flexFlow: \"column\",\r\n                            gap: \"8px\",\r\n                        }}\r\n                    >\r\n                        <Typography>Successfully signed up for Ideathon 22-23!</Typography>\r\n                        <Link href='https://ideathon.hoohacks.io'>\r\n                            <Button\r\n                                sx={{\r\n                                    backgroundColor: \"#f82249\",\r\n                                    color: \"#fff\",\r\n                                    boxShadow: 2,\r\n                                    \"&:hover\": {\r\n                                        transform: \"scale3d(1.05, 1.05, 1)\",\r\n                                        backgroundColor: \"#fff\",\r\n                                        color: \"#f82249\",\r\n                                        border: \"1px solid\",\r\n                                        borderColor: \"#f82249\",\r\n                                    }\r\n                                }}\r\n                                type=\"button\"\r\n                            >\r\n                                View Schedule\r\n                            </Button>\r\n                        </Link>\r\n                    </Box>\r\n                </Popup>\r\n                <Grid\r\n                    container\r\n                    spacing={0}\r\n                    direction=\"column\"\r\n                    alignItems=\"center\"\r\n                    justifyContent=\"center\"\r\n                    style={{ minHeight: '100vh', minWidth: '100wh' }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            width: \"100%\",\r\n                            justifyContent: \"center\",\r\n                            alignItems: \"center\",\r\n                            marginLeft: \"auto\",\r\n                            marginRight: \"auto\",\r\n                            display: \"flex\",\r\n                        }}\r\n                    >\r\n                        <Card\r\n                            sx={{\r\n                                boxShadow: 4,\r\n                                display: \"flex\",\r\n                                flexFlow: \"column nowrap\",\r\n                                width: \"992px\",\r\n                                alignItems: \"center\",\r\n                                backgroundColor: \"#fff\",\r\n                                padding: \"14px 18px\",\r\n                                gap: \"16px\",\r\n                            }}\r\n                        >\r\n\r\n                            {/* IDEATHON LOGO */}\r\n                            <Link href=\"https://ideathon.hoohacks.io\">\r\n                                <img\r\n                                    src={Logo}\r\n                                    style={{\r\n                                        borderRadius: \"5px\",\r\n                                        width: \"427px\",\r\n                                    }}\r\n\r\n                                />\r\n                            </Link>\r\n\r\n\r\n                            <Typography sx={{ textAlign: \"center\", }}>\r\n                                The third annual Ideathon is a networking, team-building, and pitching event designed to help students with technical experience and students with business experience build their technical business ideas.  Student teams can meet 1:1 with industry experts about their ideas and form long lasting relationships with them as they continue to grow their ideas. Corporate sponsors will be holding workshops to teach students about pitching their ideas, valuing their potential businesses, and building technical prototypes. There will be a two hour pitch event, where teams will pitch to a board of sponsors for funding. Teams will have the opportunity to win thousands of dollars in funding in order to bring their idea to fruition!\r\n                            </Typography>\r\n\r\n                            <Box\r\n                                sx={{\r\n                                    width: \"100%\",\r\n                                    display: \"flex\",\r\n                                    flexFlow: \"row nowrap\",\r\n                                    justifyContent: \"center\",\r\n                                    gap: \"8px\"\r\n                                }}\r\n                            >\r\n                                <TextField\r\n                                    fullWidth={true}\r\n                                    required\r\n                                    id=\"first-name\"\r\n                                    name=\"first-name\"\r\n                                    label=\"First Name\"\r\n                                    variant=\"outlined\"\r\n                                    value={firstName}\r\n                                    type=\"text\"\r\n                                    size=\"small\"\r\n                                    autoComplete=\"first-name\"\r\n                                    onChange={(e) => { setFirstName(e.target.value.replace(/[^a-z]/gi, '')); setFirstNameCheck(firstName !== '') }}\r\n                                    helperText={firstName === '' && <Typography sx={{color: \"#f82249\", fontSize: \"11px\"}}>Enter your first name</Typography>}\r\n                                />\r\n                                <TextField\r\n                                    fullWidth={true}\r\n                                    required\r\n                                    id=\"last-name\"\r\n                                    name=\"last-name\"\r\n                                    variant=\"outlined\"\r\n                                    label=\"Last Name\"\r\n                                    size=\"small\"\r\n                                    value={lastName}\r\n                                    type=\"text\"\r\n                                    autoComplete=\"last-name\"\r\n                                    onChange={(e) => { setLastName(e.target.value.replace(/[^a-z]/gi, '')); setLastNameCheck(lastName !== '') }}\r\n                                    helperText={lastName === '' && <Typography sx={{color: \"#f82249\", fontSize: \"11px\"}}>Enter your last name</Typography>}\r\n                                />\r\n                            </Box>\r\n                            <Box\r\n                                sx={{\r\n                                    width: \"100%\",\r\n                                    display: \"flex\",\r\n                                    flexFlow: \"row nowrap\",\r\n                                    justifyContent: \"center\",\r\n                                    gap: \"8px\"\r\n                                }}\r\n                            >\r\n                                <TextField\r\n                                    fullWidth={true}\r\n                                    required\r\n                                    id=\"Email\"\r\n                                    label=\"Email Address\"\r\n                                    name=\"Email\"\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                    value={email}\r\n                                    type=\"email\"\r\n                                    autoComplete=\"email\"\r\n                                    onChange={(e) => { setEmail(e.target.value); setEmailCheck(email !== '') }}\r\n                                    helperText={email === '' && <Typography sx={{color: \"#f82249\", fontSize: \"11px\"}}>Enter your email</Typography>}\r\n                                />\r\n                                <TextField\r\n                                    fullWidth={true}\r\n                                    required\r\n                                    id=\"major\"\r\n                                    label=\"Major/Intended Major\"\r\n                                    name=\"major\"\r\n                                    variant=\"outlined\"\r\n                                    value={major}\r\n                                    size=\"small\"\r\n                                    type=\"text\"\r\n                                    autoComplete=\"major\"\r\n                                    onChange={(e) => { setMajor(e.target.value); setMajorCheck(e.target.value !== '') }}\r\n                                    helperText={major === '' && <Typography sx={{color: \"#f82249\", fontSize: \"11px\"}}>Enter your major</Typography>}\r\n                                />\r\n                            </Box>\r\n                            <Box\r\n                                sx={{\r\n                                    width: \"100%\",\r\n                                    display: \"flex\",\r\n                                    flexFlow: \"column nowrap\",\r\n                                    gap: \"8px\"\r\n                                }}\r\n                            >\r\n                                <FormControl size=\"small\">\r\n                                    <InputLabel>Expected Graduation Date</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"school-year-select\"\r\n                                        label=\"Expected Graduation Year\"\r\n                                        value={selectYear}\r\n                                        onChange={(e) => setSelectYear(e.target.value)}\r\n                                    >\r\n                                        <MenuItem value={2023}>2023</MenuItem>\r\n                                        <MenuItem value={2024}>2024</MenuItem>\r\n                                        <MenuItem value={2025}>2025</MenuItem>\r\n                                        <MenuItem value={2026}>2026</MenuItem>\r\n                                        <MenuItem value={0}>Other</MenuItem>\r\n\r\n                                    </Select>\r\n                                    {selectYear === 0 ? (\r\n                                        <>\r\n                                            <TextField\r\n                                                id=\"other-year\"\r\n                                                label=\"Other Expected Graduation Year\"\r\n                                                name=\"other-year\"\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                type=\"text\"\r\n                                                autoComplete=\"selectYear\"\r\n                                                value={otherSelectYear}\r\n                                                sx={{ marginTop: \"8px\" }}\r\n                                                onChange={(e) => {setOtherSelectYear(e.target.value.replace(/\\D/g, '')); setOtherSelectYearCheck(e.target.value !== '')}}\r\n                                                helperText={otherSelectYear === '' && <Typography sx={{color: \"#f82249\", fontSize: \"11px\"}}>Enter your expected graduation year</Typography>}\r\n                                            />\r\n                                        </>\r\n                                    ) : null}\r\n                                </FormControl>\r\n                            </Box>\r\n                            <Box\r\n                                sx={{\r\n                                    width: \"100%\",\r\n                                    display: \"flex\",\r\n                                    flexFlow: \"column nowrap\",\r\n                                    gap: \"4px\"\r\n                                }}\r\n                            >\r\n                                <FormControl size=\"small\">\r\n                                    <InputLabel id=\"school-select\">University of Virginia School</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"school-select\"\r\n                                        label=\"University of Virginia School\"\r\n                                        value={selectSchool}\r\n                                        onChange={(e) => setSelectedSchool(e.target.value)}\r\n                                    >\r\n                                        <MenuItem value={\"college\"}>College of Arts and Science</MenuItem>\r\n                                        <MenuItem value={\"engineering\"}>School of Engineering and Applied Science</MenuItem>\r\n                                        <MenuItem value={\"commerce\"}>McIntire School of Commerce</MenuItem>\r\n                                        <MenuItem value={\"architecture\"}>School of Architecture</MenuItem>\r\n                                        <MenuItem value={\"wise\"}>UVA's College at Wise</MenuItem>\r\n                                        <MenuItem value={\"medicine\"}>School of Medicine</MenuItem>\r\n                                        <MenuItem value={\"law\"}>School of Law</MenuItem>\r\n                                        <MenuItem value={\"business\"}>Darden School of Business</MenuItem>\r\n                                        <MenuItem value={\"education\"}>School of Education and Human Development</MenuItem>\r\n                                        <MenuItem value={\"professional\"}>School of Continuing & Professional Studies</MenuItem>\r\n\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Box>\r\n                            <Box\r\n                                sx={{\r\n                                    width: \"100%\",\r\n                                    display: \"flex\",\r\n                                    flexFlow: \"column nowrap\",\r\n                                    gap: \"4px\"\r\n                                }}\r\n                            >\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    component=\"label\"\r\n                                    sx={{\r\n                                        backgroundColor: \"#f82249\",\r\n                                        color: \"#fff\",\r\n                                        \"&:hover\": {\r\n                                            backgroundColor: \"#fff\",\r\n                                            color: \"#f82249\",\r\n                                            border: \"1px solid\",\r\n                                            borderColor: \"#f82249\",\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    {progress < 100 ? \"Upload Resume\" : resumeName}\r\n                                    <input\r\n                                        type=\"file\"\r\n                                        hidden={true}\r\n                                        accept=\"application/msword, application/pdf\"\r\n                                        onChange={(e) => changeResumeHandle(e)}\r\n                                    />\r\n                                </Button>\r\n                                <LinearProgress variant=\"determinate\" value={progress} />\r\n                            </Box>\r\n                            <Box\r\n                                sx={{\r\n                                    width: \"100%\",\r\n                                    display: \"flex\",\r\n                                    flexFlow: \"column\",\r\n                                    gap: \"8px\",\r\n                                    boxSizing: \"border-box\",\r\n                                }}\r\n                            >\r\n                                <Typography id=\"skills\">\r\n                                    What are some skills that you possess that you think would be helpful\r\n                                    for Ideathon participants? This will be used primarily for team building. *\r\n                                </Typography>\r\n                                <TextField\r\n                                    required\r\n                                    id=\"skills\"\r\n                                    name=\"skills\"\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                    multiline\r\n                                    maxRows={Infinity}\r\n                                    value={skills}\r\n                                    autoComplete=\"skills\"\r\n                                    onChange={(e) => { setSkills(e.target.value); setSkillsCheck(e.target.value !== '') }}\r\n                                    helperText={skills === '' && <Typography sx={{color: \"#f82249\", fontSize: \"11px\"}}>Enter your skills or N/A</Typography>}\r\n                                />\r\n                            </Box>\r\n                            <Box\r\n                                sx={{\r\n                                    width: \"100%\",\r\n                                    display: \"flex\",\r\n                                    flexFlow: \"column\",\r\n                                    gap: \"8px\",\r\n                                    boxSizing: \"border-box\",\r\n                                }}\r\n                            >\r\n                                <Typography id=\"learn\">\r\n                                    What would you like to learn or get out of the Ideathon? *\r\n                                </Typography>\r\n                                <TextField\r\n                                    required\r\n                                    id=\"learn\"\r\n                                    name=\"learn\"\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                    multiline\r\n                                    maxRows={Infinity}\r\n                                    value={learn}\r\n                                    autoComplete=\"learn\"\r\n                                    onChange={(e) => { setLearn(e.target.value); setLearnCheck(e.target.value !== '') }}\r\n                                    helperText={learn === '' && <Typography sx={{color: \"#f82249\", fontSize: \"11px\"}}>Enter something you would like to learn or N/A</Typography>}\r\n                                />\r\n                            </Box>\r\n                            <Box\r\n                                sx={{\r\n                                    width: \"100%\",\r\n                                    display: \"flex\",\r\n                                    flexFlow: \"column\",\r\n                                    gap: \"8px\"\r\n                                }}\r\n                            >\r\n                                <FormGroup\r\n                                >\r\n                                    <InputLabel id=\"dietary-restriction\">Dietary Restrictions</InputLabel>\r\n\r\n                                    <FormControlLabel hidden={true} control={<Checkbox onChange={selectRestrictions} />} label=\"Vegetarian\" value=\"vegetarian\" />\r\n                                    <FormControlLabel hidden={true} control={<Checkbox onChange={selectRestrictions} />} label=\"Gluten Free\" value=\"gluten-free\" />\r\n                                    <FormControlLabel hidden={true} control={<Checkbox onChange={selectRestrictions} />} label=\"Vegan\" value=\"vegan\" />\r\n                                    <FormControlLabel hidden={true} control={<Checkbox onChange={selectRestrictions} />} label=\"Other\" value=\"other\" />\r\n                                    {dietaryRestriction.includes(\"other\") ? (\r\n                                        <>\r\n                                            <InputLabel id=\"dietary-specify-other\">Specify Other Dietary Restriction</InputLabel>\r\n                                            <TextField\r\n                                                id=\"dietary-specify-other\"\r\n                                                name=\"dietary-specify-other\"\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                type=\"text\"\r\n                                                value={otherDietaryRestriction}\r\n                                                autoComplete=\"dietary-specify-other\"\r\n                                                onChange={(e) => {setOtherDietaryRestriction(e.target.value); setOtherDietaryRestrictionCheck(e.target.value !== '')}}\r\n                                                helperText={!otherDietaryRestrictionCheck && <Typography sx={{color: \"#f82249\", fontSize: \"11px\"}}>Enter Your Dietary Restriction</Typography>}\r\n                                            />\r\n                                        </>\r\n                                    ) : null}\r\n\r\n                                </FormGroup>\r\n                            </Box>\r\n                            <Box\r\n                                sx={{\r\n                                    display: \"flex\",\r\n                                    flexFlow: \"row nowrap\",\r\n                                    gap: \"16px\",\r\n                                }}\r\n                            >\r\n                                {firstNameCheck && lastNameCheck && \r\n                                emailCheck && majorCheck && skillsCheck && \r\n                                learnCheck && (selectYear === 0 ? otherSelectYearCheck : true) &&\r\n                                (dietaryRestriction.includes(\"other\") ? otherDietaryRestrictionCheck : true) ? (\r\n                                    <Button\r\n                                        sx={{\r\n                                            backgroundColor: \"#f82249\",\r\n                                            color: \"#fff\",\r\n                                            boxShadow: 2,\r\n                                            \"&:hover\": {\r\n                                                transform: \"scale3d(1.05, 1.05, 1)\",\r\n                                                backgroundColor: \"#fff\",\r\n                                                color: \"#f82249\",\r\n                                                border: \"1px solid\",\r\n                                                borderColor: \"#f82249\",\r\n                                            }\r\n                                        }}\r\n                                        type=\"submit\"\r\n                                        onClick={() => handleSubmit()}\r\n                                    >\r\n                                        Submit Registration\r\n                                    </Button>\r\n                                ) : (\r\n                                    <Popup\r\n                                        trigger={\r\n                                            <Button\r\n                                                sx={{\r\n                                                    backgroundColor: \"#f82249\",\r\n                                                    color: \"#fff\",\r\n                                                    boxShadow: 2,\r\n                                                    \"&:hover\": {\r\n                                                        transform: \"scale3d(1.05, 1.05, 1)\",\r\n                                                        backgroundColor: \"#fff\",\r\n                                                        color: \"#f82249\",\r\n                                                        border: \"1px solid\",\r\n                                                        borderColor: \"#f82249\",\r\n                                                    }\r\n                                                }}\r\n                                                type=\"submit\"\r\n\r\n                                            >\r\n                                                Submit Registration\r\n                                            </Button>\r\n                                        }\r\n                                        on=\"hover\"\r\n                                        position=\"top center\"\r\n                                    >\r\n                                        <Box\r\n                                            sx={{\r\n                                                padding: \"5px\",\r\n                                                textAlign: \"center\",\r\n                                                display: \"flex\",\r\n                                                flexFlow: \"column nowrap\",\r\n                                            }}\r\n                                        >\r\n                                            <Typography>Please fill out the remaining fields.</Typography>\r\n                                        </Box>\r\n                                    </Popup>\r\n                                )}\r\n\r\n                                <Link href=\"https://ideathon.hoohacks.io\">\r\n                                    <Button\r\n                                        sx={{\r\n                                            backgroundColor: \"#fff\",\r\n                                            color: \"#f82249\",\r\n                                            border: \"1px solid\",\r\n                                            borderColor: \"#f82249\",\r\n                                            boxShadow: 2,\r\n                                            \"&:hover\": {\r\n                                                transform: \"scale3d(1.05, 1.05, 1)\",\r\n                                                backgroundColor: \"#f82249\",\r\n                                                color: \"#fff\",\r\n                                            }\r\n                                        }}\r\n                                        type=\"button\"\r\n                                    >\r\n                                        Cancel\r\n                                    </Button>\r\n                                </Link>\r\n                            </Box>\r\n                        </Card>\r\n                    </Box>\r\n                </Grid>\r\n            </ThemeProvider>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Registration;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport Registration from './Registration';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Registration route />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports = __webpack_public_path__ + \"static/media/logo.8887ae4c.png\";"],"sourceRoot":""}